description: fle2v2-Rangev2-Decimal-Correctness
schemaVersion: "1.25"
runOnRequirements:
  - minServerVersion: "8.0.0"
    # Skip QEv2 (also referred to as FLE2v2) tests on Serverless. Unskip once Serverless enables the QEv2 protocol.
    # FLE 2 Encrypted collections are not supported on standalone.
    # Tests for Decimal (without precision) must only run against a replica set. Decimal (without precision) queries are expected to take a long time and may exceed the default mongos timeout.
    topologies: ["replicaset"]
    csfle:
      minLibmongocryptVersion: "1.15.1"
createEntities:
  - client:
      id: "client0"
      autoEncryptOpts:
        keyVaultNamespace: keyvault.datakeys
        kmsProviders:
          local:
            key: Mng0NCt4ZHVUYUJCa1kxNkVyNUR1QURhZ2h2UzR2d2RrZzh0cFBwM3R6NmdWMDFBMUN3YkQ5aXRRMkhGRGdQV09wOGVNYUMxT2k3NjZKelhaQmRCZGJkTXVyZG9uSjFk
      observeEvents:
        - commandStartedEvent
  - database:
      id: "db"
      client: "client0"
      databaseName: default
  - collection:
      id: "coll"
      database: "db"
      collectionName: default
initialData:
  - databaseName: default
    collectionName: default
    documents: []
    createOptions:
      encryptedFields:
        {
          "fields":
            [
              {
                "keyId": { "$binary": { "base64": "EjRWeBI0mHYSNBI0VniQEg==", "subType": "04" } },
                "path": "encryptedDecimalNoPrecision",
                "bsonType": "decimal",
                "queries":
                  {
                    "queryType": "range",
                    "contention": { "$numberLong": "0" },
                    "trimFactor": { "$numberInt": "1" },
                    "sparsity": { "$numberLong": "1" },
                  },
              },
            ],
        }
  - databaseName: keyvault
    collectionName: datakeys
    documents:
      [
        {
          "_id": { "$binary": { "base64": "EjRWeBI0mHYSNBI0VniQEg==", "subType": "04" } },
          "keyMaterial":
            {
              "$binary":
                {
                  "base64": "sHe0kz57YW7v8g9VP9sf/+K1ex4JqKc5rf/URX3n3p8XdZ6+15uXPaSayC6adWbNxkFskuMCOifDoTT+rkqMtFkDclOy884RuGGtUysq3X7zkAWYTKi8QAfKkajvVbZl2y23UqgVasdQu3OVBQCrH/xY00nNAs/52e958nVjBuzQkSb1T8pKJAyjZsHJ60+FtnfafDZSTAIBJYn7UWBCwQ==",
                  "subType": "00",
                },
            },
          "creationDate": { "$date": { "$numberLong": "1648914851981" } },
          "updateDate": { "$date": { "$numberLong": "1648914851981" } },
          "status": { "$numberInt": "0" },
          "masterKey": { "provider": "local" },
        },
      ]
tests:
  - description: "Find with $gt"
    operations:
      - name: insertOne
        arguments:
          document: &doc0 { _id: 0, encryptedDecimalNoPrecision: { $numberDecimal: "0.0" } }
        object: "coll"
      - name: insertOne
        arguments:
          document: &doc1 { _id: 1, encryptedDecimalNoPrecision: { $numberDecimal: "1.0" } }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $gt: { $numberDecimal: "0.0" } } }
        object: "coll"
        expectResult: [*doc1]

  - description: "Find with $gte"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $gte: { $numberDecimal: "0.0" } } }
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        object: "coll"
        expectResult: [*doc0, *doc1]

  - description: "Find with $gt with no results"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $gt: { $numberDecimal: "1.0" } } }
        object: "coll"
        expectResult: []

  - description: "Find with $lt"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $lt: { $numberDecimal: "1.0" } } }
        object: "coll"
        expectResult: [*doc0]

  - description: "Find with $lte"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $lte: { $numberDecimal: "1.0" } } }
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        object: "coll"
        expectResult: [*doc0, *doc1]

  - description: "Find with $gt and $lt"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $gt: { $numberDecimal: "0.0" }, $lt: { $numberDecimal: "2.0" } } }
        object: "coll"
        expectResult: [*doc1]

  - description: "Find with equality"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $numberDecimal: "0.0" } }
        object: "coll"
        expectResult: [*doc0]
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $numberDecimal: "1.0" } }
        object: "coll"
        expectResult: [*doc1]

  - description: "Find with $in"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $in: [$numberDecimal: "0.0"] } }
        object: "coll"
        expectResult: [*doc0]

  - description: "Aggregate with $gte"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $gte: { $numberDecimal: "0.0" } } } }
            # sort so results from range queries are ordered.
            - { $sort: { _id: 1 } }
        object: "coll"
        expectResult: [*doc0, *doc1]

  - description: "Aggregate with $gt with no results"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $gt: { $numberDecimal: "1.0" } } } }
        object: "coll"
        expectResult: []

  - description: "Aggregate with $lt"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $lt: { $numberDecimal: "1.0" } } } }
        object: "coll"
        expectResult: [*doc0]

  - description: "Aggregate with $lte"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $lte: { $numberDecimal: "1.0" } } } }
            # sort so results from range queries are ordered.
            - { $sort: { _id: 1 } }
        object: "coll"
        expectResult: [*doc0, *doc1]

  - description: "Aggregate with $gt and $lt"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - {
                $match:
                  { encryptedDecimalNoPrecision: { $gt: { $numberDecimal: "0.0" }, $lt: { $numberDecimal: "2.0" } } },
              }
        object: "coll"
        expectResult: [*doc1]

  - description: "Aggregate with equality"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $numberDecimal: "0.0" } } }
        object: "coll"
        expectResult: [*doc0]
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $numberDecimal: "1.0" } } }
        object: "coll"
        expectResult: [*doc1]

  - description: "Aggregate with $in"
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
        object: "coll"
      - name: insertOne
        arguments: { document: *doc1 }
        object: "coll"
      - name: aggregate
        arguments:
          pipeline:
            - { $match: { encryptedDecimalNoPrecision: { $in: [$numberDecimal: "0.0"] } } }
        object: "coll"
        expectResult: [*doc0]

  - description: "Wrong type: Insert Int"
    operations:
      - name: insertOne
        arguments: { document: { _id: 0, encryptedDecimalNoPrecision: { $numberInt: "0" } } }
        object: "coll"
        expectError:
          # Expect an error from mongocryptd.
          errorContains: "Cannot encrypt element"

  - description: "Wrong type: Find Int"
    operations:
      - name: find
        arguments:
          filter: { encryptedDecimalNoPrecision: { $gte: { $numberInt: "0" } } }
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        object: "coll"
        expectError:
          # expect an error from libmongocrypt.
          errorContains: "field type is not supported"
