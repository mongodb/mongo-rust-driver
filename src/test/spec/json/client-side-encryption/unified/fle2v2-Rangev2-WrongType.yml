description: fle2v2-Rangev2-WrongType
schemaVersion: "1.25"
runOnRequirements:
  - minServerVersion: "8.0.0"
    # Skip QEv2 (also referred to as FLE2v2) tests on Serverless. Unskip once Serverless enables the QEv2 protocol.
    # FLE 2 Encrypted collections are not supported on standalone.
    maxServerVersion: "8.99.99"
    topologies: ["replicaset", "sharded", "load-balanced"]
    csfle:
      minLibmongocryptVersion: "1.15.1"
createEntities:
  - client:
      id: "client0"
      autoEncryptOpts:
        keyVaultNamespace: keyvault.datakeys
        kmsProviders:
          local:
            key: Mng0NCt4ZHVUYUJCa1kxNkVyNUR1QURhZ2h2UzR2d2RrZzh0cFBwM3R6NmdWMDFBMUN3YkQ5aXRRMkhGRGdQV09wOGVNYUMxT2k3NjZKelhaQmRCZGJkTXVyZG9uSjFk
      observeEvents:
        - commandStartedEvent
  - database:
      id: "db"
      client: "client0"
      databaseName: &database_name default
  - collection:
      id: "coll"
      database: "db"
      collectionName: &collection_name default
  - client:
      id: "client_unencrypted"
  - database:
      id: "db_unencrypted"
      client: "client_unencrypted"
      databaseName: default
  - collection:
      id: "coll_unencrypted"
      database: "db_unencrypted"
      collectionName: default
initialData:
  - databaseName: default
    collectionName: default
    documents: []
    createOptions:
      encryptedFields:
        {
          "fields":
            [
              {
                "keyId": { "$binary": { "base64": "EjRWeBI0mHYSNBI0VniQEg==", "subType": "04" } },
                "path": "encryptedInt",
                "bsonType": "int",
                "queries":
                  {
                    "queryType": "range",
                    "contention": { "$numberLong": "0" },
                    "trimFactor": { "$numberLong": "1" },
                    "sparsity": { "$numberLong": "1" },
                    "min": { "$numberInt": "0" },
                    "max": { "$numberInt": "200" },
                  },
              },
            ],
        }
  - databaseName: keyvault
    collectionName: datakeys
    documents:
      [
        {
          "_id": { "$binary": { "base64": "EjRWeBI0mHYSNBI0VniQEg==", "subType": "04" } },
          "keyMaterial":
            {
              "$binary":
                {
                  "base64": "sHe0kz57YW7v8g9VP9sf/+K1ex4JqKc5rf/URX3n3p8XdZ6+15uXPaSayC6adWbNxkFskuMCOifDoTT+rkqMtFkDclOy884RuGGtUysq3X7zkAWYTKi8QAfKkajvVbZl2y23UqgVasdQu3OVBQCrH/xY00nNAs/52e958nVjBuzQkSb1T8pKJAyjZsHJ60+FtnfafDZSTAIBJYn7UWBCwQ==",
                  "subType": "00",
                },
            },
          "creationDate": { "$date": { "$numberLong": "1648914851981" } },
          "updateDate": { "$date": { "$numberLong": "1648914851981" } },
          "status": { "$numberInt": "0" },
          "masterKey": { "provider": "local" },
        },
      ]
tests:
  - description: "Wrong type: Insert Double"
    operations:
      - name: insertOne
        arguments: { document: { _id: 0, encryptedInt: { $numberDouble: "0" } } }
        object: "coll"
        expectError:
          # Expect an error from mongocryptd.
          errorContains: "Cannot encrypt element"

  - description: "Wrong type: Find Double"
    operations:
      - name: insertOne
        arguments: { document: { _id: 0, encryptedInt: { $numberInt: "0" } } }
        object: "coll"
      - name: find
        arguments:
          filter: { encryptedInt: { $gte: { $numberDouble: "0" } } }
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        object: "coll"
        expectError:
          # expect an error from libmongocrypt.
          errorContains: "field type is not supported"
