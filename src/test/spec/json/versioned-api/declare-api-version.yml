description: "Only version string declared"

schemaVersion: "1.1"

runOnRequirements:
  - minServerVersion: "4.7"

createEntities:
  - client:
      id: &client client
      observeEvents:
        - commandStartedEvent
      serverApi:
        version: "1"
  - database:
      id: &database database
      client: *client
      databaseName: &databaseName versioned-api-tests
  - collection:
      id: &collection collection
      database: *database
      collectionName: &collectionName test
  - session:
      id: &session session
      client: *client

initialData:
  - collectionName: *collectionName
    databaseName: *databaseName
    documents:
      - { _id: 1, x: 11 }
      - { _id: 2, x: 22 }
      - { _id: 3, x: 33 }
      - { _id: 4, x: 44 }
      - { _id: 5, x: 55 }

tests:
  - description: "find command with declared API version appends to the command, but getMore does not"
    runOnRequirements:
      - minServerVersion: "4.7"
    operations:
      - name: find
        object: *collection
        arguments:
          filter: {}
          sort: { _id: 1 }
          batchSize: 3
          limit: 4
        expectResult:
          - { _id: 1, x: 11 }
          - { _id: 2, x: 22 }
          - { _id: 3, x: 33 }
          - { _id: 4, x: 44 }
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              command:
                find: *collectionName
                apiVersion: "1"
                apiStrict: { $$unsetOrMatches: false }
                apiDeprecationErrors: { $$unsetOrMatches: false }
              commandName: find
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                getMore: { $$type: [ int, long ] }
                apiVersion: { $$exists: false }
                apiStrict: { $$exists: false }
                apiDeprecationErrors: { $$exists: false }
              commandName: getMore
              databaseName: *databaseName

  - description: "Only the first command in a transaction declares an API version"
    runOnRequirements:
      - topologies: [ replicaset, sharded-replicaset ]
    operations:
      - name: startTransaction
        object: *session
      - name: insertOne
        object: *collection
        arguments:
          session: *session
          document: { _id: 6, x: 66 }
        expectResult: { $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } } }
      - name: insertOne
        object: *collection
        arguments:
          session: *session
          document: { _id: 7, x: 77 }
        expectResult: { $$unsetOrMatches: { insertedId: { $$unsetOrMatches: 1 } } }
      - name: commitTransaction
        object: *session
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents: [ { _id: 6, x: 66 } ]
                ordered: true
                lsid: { $$sessionLsid: *session }
                txnNumber: 1
                startTransaction: true
                autocommit: false
                apiVersion: "1"
                # omitted fields
                apiStrict: { $$unsetOrMatches: false }
                apiDeprecationErrors: { $$unsetOrMatches: false }
                readConcern: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                insert: *collectionName
                documents: [ { _id: 7, x: 77 } ]
                ordered: true
                lsid: { $$sessionLsid: *session }
                txnNumber: 1
                autocommit: false
                # omitted fields
                apiVersion: { $$exists: false }
                apiStrict: { $$exists: false }
                apiDeprecationErrors: { $$exists: false }
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: insert
              databaseName: *databaseName
          - commandStartedEvent:
              command:
                commitTransaction: 1
                lsid: { $$sessionLsid: *session }
                txnNumber: 1
                autocommit: false
                # omitted fields
                apiVersion: { $$exists: false }
                apiStrict: { $$exists: false }
                apiDeprecationErrors: { $$exists: false }
                readConcern: { $$exists: false }
                startTransaction: { $$exists: false }
                writeConcern: { $$exists: false }
              commandName: commitTransaction
              databaseName: admin

  - description: "runCommand overrides an API version declared in the command"
    operations:
      - name: runCommand
        object: *database
        arguments:
          commandName: ping
          command:
            ping: 1
            apiVersion: "server_will_never_support_this_api_version"
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              command:
                ping: 1
                apiVersion: "1"
                apiStrict: { $$unsetOrMatches: false }
                apiDeprecationErrors: { $$unsetOrMatches: false }
              commandName: ping
              databaseName: *databaseName

  - description: "runCommand only overrides specified options"
    operations:
      - name: runCommand
        object: *database
        arguments:
          commandName: ping
          command:
            ping: 1
            apiStrict: true
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              command:
                ping: 1
                apiVersion: "1"
                apiStrict: true
                apiDeprecationErrors: { $$unsetOrMatches: false }
              commandName: ping
              databaseName: *databaseName
