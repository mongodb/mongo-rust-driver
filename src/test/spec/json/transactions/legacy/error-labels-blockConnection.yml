# This file contains a single test that should be in error-labels.yml. The test
# was moved from error-labels.yml during the spec work for client-side
# operations timeout because it uses the blockConnection parameter in
# failCommand, which is only available in server versions 4.2+. It should be
# merged back into error-labels.yml when that test file is ported to the
# unified test format as the format allows for per-test runOn requirements.

runOn:
    -
        minServerVersion: "4.2"
        topology: ["replicaset", "sharded", "load-balanced"]

database_name: &database_name "transaction-tests"
collection_name: &collection_name "test"

data: []

tests:

  # This test previously used failCommand with closeConnection=true to force a
  # network error, but this does not work after CSOT is implemented because
  # network errors are retried indefinitely. It has been changed to use
  # socketTimeoutMS with blockConnection to force a network error because
  # drivers only retry socketTimeoutMS-related errors once rather than
  # indefinitely.
  - description: add RetryableWriteError and UnknownTransactionCommitResult labels to connection errors

    clientOptions:
      socketTimeoutMS: 100

    failPoint:
      # Drivers stop retrying after two socket timeouts that occur due to the use of socketTimeoutMS.
      configureFailPoint: failCommand
      mode: { times: 2 }
      data:
          failCommands: ["commitTransaction"]
          blockConnection: true
          blockTimeMS: 150

    operations:
      - name: startTransaction
        object: session0
      - name: insertOne
        object: collection
        arguments:
          session: session0
          document:
            _id: 1
        result:
          insertedId: 1
      - name: commitTransaction
        object: session0
        result:
          errorLabelsContain: ["RetryableWriteError", "UnknownTransactionCommitResult"]
          errorLabelsOmit: ["TransientTransactionError"]
      - name: commitTransaction
        object: session0

    expectations:
      - command_started_event:
          command:
            insert: *collection_name
            documents:
              - _id: 1
            ordered: true
            readConcern:
            lsid: session0
            txnNumber:
              $numberLong: "1"
            startTransaction: true
            autocommit: false
            writeConcern:
          command_name: insert
          database_name: *database_name
      - command_started_event:
          command:
            commitTransaction: 1
            lsid: session0
            txnNumber:
              $numberLong: "1"
            startTransaction:
            autocommit: false
            writeConcern:
          command_name: commitTransaction
          database_name: admin
      - command_started_event:
          command:
            commitTransaction: 1
            lsid: session0
            txnNumber:
              $numberLong: "1"
            startTransaction:
            autocommit: false
            # commitTransaction applies w:majority on retries
            writeConcern: { w: majority, wtimeout: 10000 }
          command_name: commitTransaction
          database_name: admin
      - command_started_event:
          command:
            commitTransaction: 1
            lsid: session0
            txnNumber:
              $numberLong: "1"
            startTransaction:
            autocommit: false
            writeConcern: { w: majority, wtimeout: 10000 }
          command_name: commitTransaction
          database_name: admin

    outcome:
      collection:
        data:
          - _id: 1
