use std::{sync::Arc, time::Duration};

use derivative::Derivative;
use serde::Deserialize;
use typed_builder::TypedBuilder;

use crate::{
    bson_util,
    client::{auth::Credential, options::ServerApi},
    event::cmap::CmapEventHandler,
    options::{ClientOptions, DriverInfo, StreamAddress, TlsOptions},
};

/// Contains the options for creating a connection pool. While these options are specified at the
/// client-level, `ConnectionPoolOptions` is exposed for the purpose of CMAP event handling.
#[derive(Clone, Default, Deserialize, TypedBuilder, Derivative)]
#[derivative(Debug, PartialEq)]
#[builder(field_defaults(default, setter(strip_option)))]
#[serde(rename_all = "camelCase")]
pub struct ConnectionPoolOptions {
    /// The application name specified by the user. This is sent to the server as part of the
    /// handshake that each connection makes when it's created.
    pub app_name: Option<String>,

    /// The connect timeout passed to each underlying TcpStream when attemtping to connect to the
    /// server.
    #[serde(skip)]
    pub connect_timeout: Option<Duration>,

    /// The credential to use for authenticating connections in this pool.
    #[serde(skip)]
    pub credential: Option<Credential>,

    /// Extra information to append to the driver version in the metadata of the handshake with the
    /// server. This should be used by libraries wrapping the driver, e.g. ODMs.
    #[serde(skip)]
    pub driver_info: Option<DriverInfo>,

    /// Processes all events generated by the pool.
    #[derivative(Debug = "ignore", PartialEq = "ignore")]
    #[serde(skip)]
    pub event_handler: Option<Arc<dyn CmapEventHandler>>,

    /// How often the background thread performs its maintenance (e.g. ensure minPoolSize).
    #[cfg(test)]
    #[serde(skip)]
    pub maintenance_frequency: Option<Duration>,

    /// Connections that have been ready for usage in the pool for longer than `max_idle_time` will
    /// not be used.
    ///
    /// The default is that connections will not be closed due to being idle.
    #[serde(rename = "maxIdleTimeMS")]
    #[serde(default)]
    #[serde(deserialize_with = "bson_util::deserialize_duration_from_u64_millis")]
    pub max_idle_time: Option<Duration>,

    /// The maximum number of connections that the pool can have at a given time. This includes
    /// connections which are currently checked out of the pool.
    ///
    /// The default is 100.
    pub max_pool_size: Option<u32>,

    /// The minimum number of connections that the pool can have at a given time. This includes
    /// connections which are currently checked out of the pool. If fewer than `min_pool_size`
    /// connections are in the pool, connections will be added to the pool in the background.
    ///
    /// The default is that no minimum is enforced
    pub min_pool_size: Option<u32>,

    /// Whether to start the pool as "ready" or not.
    /// For tests only.
    #[cfg(test)]
    #[builder(setter(skip), default)]
    pub(crate) ready: Option<bool>,

    /// The declared API version
    ///
    /// The default value is to have no declared API version
    #[builder(setter(skip), default)]
    pub(crate) server_api: Option<ServerApi>,

    /// The options specifying how a TLS connection should be configured. If `tls_options` is
    /// `None`, then TLS will not be used for the connections.
    ///
    /// The default is not to use TLS for connections.
    #[serde(skip)]
    pub tls_options: Option<TlsOptions>,

    /// Rather than wait indefinitely for a connection to become available, instead return an error
    /// after the given duration.
    ///
    /// The default is to block indefinitely until a connection becomes available.
    #[serde(rename = "waitQueueTimeoutMS")]
    #[serde(default)]
    #[serde(deserialize_with = "bson_util::deserialize_duration_from_u64_millis")]
    pub wait_queue_timeout: Option<Duration>,
}

impl ConnectionPoolOptions {
    pub(crate) fn from_client_options(options: &ClientOptions) -> Self {
        let mut pool_options = Self::builder().build();
        pool_options.app_name = options.app_name.clone();
        pool_options.connect_timeout = options.connect_timeout;
        pool_options.credential = options.credential.clone();
        pool_options.driver_info = options.driver_info.clone();
        pool_options.event_handler = options.cmap_event_handler.clone();
        pool_options.max_idle_time = options.max_idle_time;
        pool_options.min_pool_size = options.min_pool_size;
        pool_options.tls_options = options.tls_options();
        pool_options.wait_queue_timeout = options.wait_queue_timeout;

        pool_options
    }
}

/// Options used for constructing a `Connection`.
#[derive(Derivative)]
#[derivative(Debug)]
#[derive(Clone)]
pub(crate) struct ConnectionOptions {
    pub(crate) connect_timeout: Option<Duration>,

    pub(crate) tls_options: Option<TlsOptions>,

    #[derivative(Debug = "ignore")]
    pub(crate) event_handler: Option<Arc<dyn CmapEventHandler>>,
}

impl From<ConnectionPoolOptions> for ConnectionOptions {
    fn from(pool_options: ConnectionPoolOptions) -> Self {
        Self {
            connect_timeout: pool_options.connect_timeout,
            tls_options: pool_options.tls_options,
            event_handler: pool_options.event_handler,
        }
    }
}

#[derive(Clone, Debug, TypedBuilder)]
pub(crate) struct StreamOptions {
    pub(crate) address: StreamAddress,

    #[builder(default, setter(strip_option))]
    pub(crate) connect_timeout: Option<Duration>,

    #[builder(default, setter(strip_option))]
    pub(crate) tls_options: Option<TlsOptions>,
}
