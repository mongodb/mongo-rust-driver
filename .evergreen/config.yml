############################################################
# Evergreen configuration file for the MongoDB Rust Driver #
############################################################

# If a task fails, go through all versions that may have been skipped to detect when it started
# failing.
stepback: true

# Mark a failure as a system failure (purple) rather than a test failure (red) by default. To
# override this for tests, mark the function as type: test.
command_type: system

# If any of the pre tasks fails, the task will be marked as a failure.
pre_error_fails_task: true

# Functions to run before all tasks (except those in task groups).
pre:
  - func: "fetch source"
  - func: "create expansions"
  - func: "prepare resources"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "init test-results"
  - func: "make files executable"
  - func: "install rust"
  - func: "install junit dependencies"

# Functions to run after all tasks (except those in task groups).
post:
  - func: "stop load balancer"
  - func: "stop mongo orchestration"
  - func: "tear down aws"
  - func: "upload test results"
  - func: "upload-mo-artifacts"
  - func: "cleanup"

# Cause a timeout if a task does not complete within 150 minutes. TODO RUST-1721: reduce this.
exec_timeout_secs: 9000
# What to do if the timeout is hit. Post-task functions will still run.
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

##################
# Build Variants #
##################
buildvariants:
  - name: compile
    display_name: "Compile Only"
    run_on:
      - rhel87-small
    tasks:
      - name: compile-on-latest
      - name: compile-on-msrv

  - name: lint
    display_name: "Lint"
    run_on:
      - rhel87-small
    tasks:
      - name: .lint

  - name: rhel-8
    display_name: "RHEL 8"
    run_on:
      - rhel87-small
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .standalone
      - name: .replicaset
      - name: .sharded

  - name: ubuntu-22.04-arm64
    display_name: "Ubuntu 22.04 (ARM64)"
    run_on:
      - ubuntu2204-arm64-small
    expansions:
      # Needed to skip installation of the legacy shell in boostrap mongo-orchestration, which is
      # not available on Ubuntu 22.04.
      SKIP_LEGACY_SHELL: true
      AUTH: auth
      SSL: ssl
    tasks:
      # Ubuntu 22.04 does not support MongoDB versions below 6.0.
      - name: .standalone !.3.6 !.4.0 !.4.2 !.4.4 !.5.0
      - name: .replicaset !.3.6 !.4.0 !.4.2 !.4.4 !.5.0
      - name: .sharded !.3.6 !.4.0 !.4.2 !.4.4 !.5.0

  - name: macos-11.00
    display_name: "MacOS 11.00"
    run_on:
      - macos-1100
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .standalone
      - name: .replicaset
      - name: .sharded

  - name: windows-64-vs2017
    display_name: "Windows (VS 2017)"
    run_on:
      - windows-64-vs2017-small
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .standalone
      - name: .replicaset
      - name: .sharded

  - name: async-std-ubuntu
    display_name: "async-std Runtime (Ubuntu)"
    run_on:
      - ubuntu2204-arm64-small
    expansions:
      # Needed to skip installation of the legacy shell in boostrap mongo-orchestration, which is
      # not available on Ubuntu 22.04.
      SKIP_LEGACY_SHELL: true
      ASYNC_STD: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: async-std-rhel
    display_name: "async-std Runtime (RHEL)"
    run_on:
      - rhel87-small
    expansions:
      ASYNC_STD: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: async-std-macos
    display_name: "async-std Runtime (MacOS)"
    run_on:
      - macos-1100
    expansions:
      ASYNC_STD: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: async-std-windows
    display_name: "async-std Runtime (Windows)"
    run_on:
      - windows-64-vs2017-small
    expansions:
      ASYNC_STD: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: openssl-rhel
    display_name: "OpenSSL (RHEL)"
    run_on:
      - rhel87-small
    expansions:
      OPENSSL: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: openssl-ubuntu
    display_name: "OpenSSL (Ubuntu)"
    patchable: false
    run_on:
      - ubuntu2204-arm64-small
    expansions:
      # Needed to skip installation of the legacy shell (which is not available on Ubuntu 22.04) in
      # boostrap mongo-orchestration.
      SKIP_LEGACY_SHELL: true
      OPENSSL: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: openssl-macos
    display_name: "OpenSSL (MacOS)"
    patchable: false
    run_on:
      - macos-1100
    expansions:
      OPENSSL: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: openssl-windows
    display_name: "OpenSSL (Windows)"
    patchable: false
    run_on:
      - windows-64-vs2017-small
    expansions:
      OPENSSL: true
      AUTH: auth
      SSL: ssl
    tasks:
      - name: .rapid .replicaset

  - name: no-auth-tls
    display_name: "No Auth/TLS"
    run_on:
      - rhel87-small
    tasks:
      - .rapid .replicaset

  - name: compression
    display_name: "Compression"
    patchable: false
    run_on:
      - rhel87-small
    expansions:
      COMPRESSION: true
      AUTH: auth
      SSL: ssl
    tasks:
      - .rapid .replicaset

  - name: stable-api
    display_name: "Stable API V1"
    patchable: false
    run_on:
      - rhel87-small
    expansions:
      REQUIRE_API_VERSION: true
      MONGODB_API_VERSION: 1
      AUTH: auth
      # Configuring SSL: ssl causes errors in bootstrap mongo-orchestration.
    tasks:
      # The Stable API was introduced in MongoDB version 5.0. Drivers Evergreen Tools only supports
      # setting REQUIRE_API_VERSION on standalones.
      - .standalone !.3.6 !.4.0 !.4.2 !.4.4

  - name: sync-api
    display_name: "Sync API"
    patchable: false
    run_on:
      - rhel87-small
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - .sync

  - name: atlas-connectivity
    display_name: "Atlas Connectivity"
    patchable: false
    run_on:
      - rhel87-small
    tasks:
      - test-atlas-connectivity

  - name: aws-auth
    display_name: "AWS Authentication"
    patchable: false
    run_on:
      # Use ubuntu1804. AWS tasks require legacy `mongo` shell. Legacy `mongo` shell is not available on newer distros.
      - ubuntu1804-small
    expansions:
      AUTH: auth
      SSL: ssl
      ORCHESTRATION_FILE: auth-aws.json
    tasks:
      - .aws-auth

  - name: azure-kms
    display_name: "Azure KMS"
    patchable: false
    run_on:
      # The Azure CLI is not available on RHEL/Ubuntu machines.
      - debian11-small
    expansions:
      LIBMONGOCRYPT_OS: "debian11"
    tasks:
      - name: azure-kms-task-group
    batchtime: 20160

  - name: gcp-kms
    display_name: "GCP KMS"
    patchable: false
    run_on:
      # The GCP CLI is not available on RHEL/Ubuntu machines.
      - debian11-small
    expansions:
      LIBMONGOCRYPT_OS: "debian11"
    tasks:
      - name: gcp-kms-task-group
    batchtime: 20160

  - name: x509-auth
    display_name: "x509 Authentication"
    patchable: false
    run_on:
      - rhel87-small
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - name: test-x509-auth

  - name: plain-auth
    display_name: "Plain Authentication"
    patchable: false
    run_on:
      - rhel87-small
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - test-plain-auth

  - name: serverless
    patchable: false
    display_name: "Serverless"
    run_on:
      - rhel80-small
    expansions:
      LIBMONGOCRYPT_OS: rhel-80-64-bit
      AUTH: auth
      SSL: ssl
    tasks:
      - serverless-task-group

  - name: oidc
    display_name: OIDC
    patchable: false
    run_on:
      - rhel87-small
    expansions:
      AUTH: auth
      SSL: ssl
    tasks:
      - test-oidc

  - name: in-use-encryption
    display_name: "In-Use Encryption"
    run_on:
      - rhel80-small
    expansions:
      LIBMONGOCRYPT_OS: rhel-80-64-bit
      AUTH: auth
      SSL: ssl
    tasks:
      - .in-use-encryption

  - name: in-use-encryption-disable-crypt-shared
    display_name: "In-Use Encryption (disable crypt_shared)"
    patchable: false
    run_on:
      - rhel80-small
    expansions:
      LIBMONGOCRYPT_OS: rhel-80-64-bit
      AUTH: auth
      SSL: ssl
      DISABLE_CRYPT_SHARED: true
    tasks:
      - .in-use-encryption

  - name: in-use-encryption-openssl
    display_name: "In-Use Encryption (OpenSSL)"
    patchable: false
    run_on:
      - rhel80-small
    expansions:
      LIBMONGOCRYPT_OS: rhel-80-64-bit
      AUTH: auth
      SSL: ssl
      OPENSSL: true
    tasks:
      - test-in-use-encryption-openssl

  - name: load-balancer
    display_name: "Load Balancer"
    run_on:
      - rhel87-small
    tasks:
      - .load-balancer

###############
# Task Groups #
###############
task_groups:
  - name: serverless-task-group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - func: "create expansions"
      - func: "prepare resources"
      - func: "windows fix"
      - func: "fix absolute paths"
      - func: "init test-results"
      - func: "make files executable"
      - func: "install rust"
      - func: "install junit dependencies"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            SERVERLESS_DRIVERS_GROUP=${SERVERLESS_DRIVERS_GROUP} \
            SERVERLESS_API_PUBLIC_KEY=${SERVERLESS_API_PUBLIC_KEY} \
            SERVERLESS_API_PRIVATE_KEY=${SERVERLESS_API_PRIVATE_KEY} \
            LOADBALANCED=ON \
              bash ${DRIVERS_TOOLS}/.evergreen/serverless/create-instance.sh
      - command: expansions.update
        params:
          file: serverless-expansion.yml
    teardown_group:
      - command: shell.exec
        params:
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            SERVERLESS_DRIVERS_GROUP=${SERVERLESS_DRIVERS_GROUP} \
            SERVERLESS_API_PUBLIC_KEY=${SERVERLESS_API_PUBLIC_KEY} \
            SERVERLESS_API_PRIVATE_KEY=${SERVERLESS_API_PRIVATE_KEY} \
            SERVERLESS_INSTANCE_NAME=${SERVERLESS_INSTANCE_NAME} \
              bash ${DRIVERS_TOOLS}/.evergreen/serverless/delete-instance.sh
      - func: "upload test results"
      - func: "upload-mo-artifacts"
      - func: "cleanup"

    tasks:
      - "test-serverless"
      - "test-in-use-encryption-serverless"

  - name: azure-kms-task-group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - func: "create expansions"
      - func: "prepare resources"
      - func: "windows fix"
      - func: "fix absolute paths"
      - func: "init test-results"
      - func: "make files executable"
      - func: "install rust"
      - func: "install libmongocrypt"
      - command: shell.exec
        params:
          shell: bash
          script: |-
            ${PREPARE_SHELL}
            set +o xtrace
            echo '${testazurekms_publickey}' > /tmp/testazurekms_publickey
            echo '${testazurekms_privatekey}' > /tmp/testazurekms_privatekey
            # Set 600 permissions on private key file. Otherwise ssh / scp may error with permissions "are too open".
            chmod 600 /tmp/testazurekms_privatekey
            export AZUREKMS_CLIENTID=${testazurekms_clientid}
            export AZUREKMS_TENANTID=${testazurekms_tenantid}
            export AZUREKMS_SECRET=${testazurekms_secret}
            export AZUREKMS_DRIVERS_TOOLS=$DRIVERS_TOOLS
            export AZUREKMS_RESOURCEGROUP=${testazurekms_resourcegroup}
            export AZUREKMS_PUBLICKEYPATH=/tmp/testazurekms_publickey
            export AZUREKMS_PRIVATEKEYPATH=/tmp/testazurekms_privatekey
            export AZUREKMS_SCOPE=${testazurekms_scope}
            export AZUREKMS_VMNAME_PREFIX=rustdriver
            set -o xtrace
            $DRIVERS_TOOLS/.evergreen/csfle/azurekms/create-and-setup-vm.sh
      - command: expansions.update
        params:
          file: testazurekms-expansions.yml
      - command: shell.exec
        params:
          shell: bash
          script: |-
            cat <<EOT > azure_shell.yml
            AZURE_SHELL: |
              export AZUREKMS_VMNAME=${AZUREKMS_VMNAME}
              export AZUREKMS_RESOURCEGROUP=${testazurekms_resourcegroup}
              export AZUREKMS_PRIVATEKEYPATH=/tmp/testazurekms_privatekey
              export AZUREKMS_KEY_NAME='${testazurekms_keyname}'
              export AZUREKMS_KEY_VAULT_ENDPOINT='${testazurekms_keyvaultendpoint}'
            EOT
      - command: expansions.update
        params:
          file: azure_shell.yml
    teardown_group:
      - command: expansions.update
        params:
          file: testazurekms-expansions.yml
      - command: shell.exec
        params:
          shell: bash
          script: |-
            ${PREPARE_SHELL}
            ${AZURE_SHELL}
            set -o errexit
            $DRIVERS_TOOLS/.evergreen/csfle/azurekms/delete-vm.sh
    tasks:
      - test-azure-kms

  - name: gcp-kms-task-group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - func: "create expansions"
      - func: "prepare resources"
      - func: "windows fix"
      - func: "fix absolute paths"
      - func: "init test-results"
      - func: "make files executable"
      - func: "install rust"
      - func: "install libmongocrypt"
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            echo '${testgcpkms_key_file}' > /tmp/testgcpkms_key_file.json
            export GCPKMS_KEYFILE=/tmp/testgcpkms_key_file.json
            export GCPKMS_DRIVERS_TOOLS=$DRIVERS_TOOLS
            export GCPKMS_SERVICEACCOUNT="${testgcpkms_service_account}"
            set -o xtrace
            $DRIVERS_TOOLS/.evergreen/csfle/gcpkms/create-and-setup-instance.sh
      - command: expansions.update
        params:
          file: testgcpkms-expansions.yml
    teardown_group:
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            ${PREPARE_SHELL}
            set +o xtrace
            export GCPKMS_GCLOUD=${GCPKMS_GCLOUD}
            export GCPKMS_PROJECT=${GCPKMS_PROJECT}
            export GCPKMS_ZONE=${GCPKMS_ZONE}
            export GCPKMS_INSTANCENAME=${GCPKMS_INSTANCENAME}
            set -o xtrace
            $DRIVERS_TOOLS/.evergreen/csfle/gcpkms/delete-instance.sh
    tasks:
      - test-gcp-kms

#########
# Tasks #
#########
tasks:
  - name: compile-on-latest
    commands:
      - func: "compile only"

  - name: compile-on-msrv
    commands:
      - func: "compile only"
        vars:
          # Our minimum supported Rust version. This should be updated whenever the MSRV is bumped.
          RUST_VERSION: 1.61.0

  - name: check-cargo-deny
    tags: [lint]
    commands:
      - func: "check cargo deny"

  - name: check-rustfmt
    tags: [lint]
    commands:
      - func: "check rustfmt"

  - name: check-clippy
    tags: [lint]
    commands:
      - func: "check clippy"

  - name: check-rustdoc
    tags: [lint]
    commands:
      - func: "check rustdoc"

  - name: check-manual
    tags: [lint]
    commands:
      - func: "check manual"

  - name: test-3.6-standalone
    tags: [3.6, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 3.6
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-4.0-standalone
    tags: [4.0, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.0
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-4.2-standalone
    tags: [4.2, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.2
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-4.4-standalone
    tags: [4.4, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.4
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-5.0-standalone
    tags: [5.0, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 5.0
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-6.0-standalone
    tags: [6.0, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 6.0
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-7.0-standalone
    tags: [7.0, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 7.0
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-rapid-standalone
    tags: [rapid, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-latest-standalone
    tags: [latest, standalone]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: latest
          TOPOLOGY: server
      - func: "run driver test suite"

  - name: test-3.6-replicaset
    tags: [3.6, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 3.6
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-4.0-replicaset
    tags: [4.0, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.0
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-4.2-replicaset
    tags: [4.2, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.2
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-4.4-replicaset
    tags: [4.4, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.4
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-5.0-replicaset
    tags: [5.0, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 5.0
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-6.0-replicaset
    tags: [6.0, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 6.0
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-7.0-replicaset
    tags: [7.0, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 7.0
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-rapid-replicaset
    tags: [rapid, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-latest-replicaset
    tags: [latest, replicaset]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: latest
          TOPOLOGY: replica_set
      - func: "run driver test suite"

  - name: test-3.6-sharded
    tags: [3.6, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 3.6
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-4.0-sharded
    tags: [4.0, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.0
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-4.2-sharded
    tags: [4.2, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.2
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-4.4-sharded
    tags: [4.4, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.4
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-5.0-sharded
    tags: [5.0, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 5.0
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-6.0-sharded
    tags: [6.0, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 6.0
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-7.0-sharded
    tags: [7.0, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 7.0
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-rapid-sharded
    tags: [rapid, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-latest-sharded
    tags: [latest, sharded]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: latest
          TOPOLOGY: sharded_cluster
      - func: "run driver test suite"

  - name: test-compression
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: replica_set
      - func: "run driver test suite"
        vars:
          COMPRESSION: true

  - name: test-aws-auth-regular-credentials
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: "auth-aws.json"
          MONGODB_VERSION: "latest"
          TOPOLOGY: "server"
      - func: "add aws auth variables to file"
      - func: "run aws auth test with regular aws credentials"

  - name: test-aws-auth-assume-role-credentials
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: auth-aws.json
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "add aws auth variables to file"
      - func: "run aws auth test with assume role credentials"

  - name: test-aws-auth-environment-variables
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: "auth-aws.json"
          MONGODB_VERSION: "latest"
          TOPOLOGY: "server"
      - func: "add aws auth variables to file"
      - func: "run aws auth test with aws credentials as environment variables"

  - name: test-aws-auth-environment-variables-session-token
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: auth-aws.json
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "add aws auth variables to file"
      - func: "run aws auth test with aws credentials and session token as environment variables"

  - name: test-aws-auth-ec2
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: auth-aws.json
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "add aws auth variables to file"
      - func: "run aws auth test with aws EC2 credentials"

  - name: test-aws-auth-ecs
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: auth-aws.json
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "add aws auth variables to file"
      - func: "run aws ecs auth test"

  - name: test-aws-auth-assume-role-with-web-identity
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: auth-aws.json
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "add aws auth variables to file"
      - func: "run aws assume role with web identity test"

  - name: test-aws-auth-assume-role-with-web-identity-session-name
    tags: [aws-auth]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          ORCHESTRATION_FILE: auth-aws.json
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "add aws auth variables to file"
      - func: "run aws assume role with web identity test"
        vars:
          AWS_ROLE_SESSION_NAME: test

  - name: test-atlas-connectivity
    commands:
      - func: "run atlas tests"

  - name: test-gcp-kms
    commands:
      - func: "build and upload gcp kms test"
      - func: "run gcp kms test"

  - name: test-azure-kms
    commands:
      - command: shell.exec
        params:
          working_dir: src
          script: |
            ${PREPARE_SHELL}
            ${AZURE_SHELL}
            .evergreen/run-azure-kms-test.sh

  - name: test-x509-auth
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "run x509 tests"

  - name: test-plain-auth
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: server
      - func: "run plain tests"

  - name: test-serverless
    commands:
      - func: "run serverless tests"

  - name: test-tokio-sync
    tags: [sync]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: replica_set
      - func: "run sync tests"

  - name: test-async-std-sync
    tags: [sync]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: replica_set
      - func: "run sync tests"
        vars:
          ASYNC_STD: true

  - name: test-oidc
    commands:
      - func: bootstrap oidc
      - func: bootstrap mongo-orchestration
        vars:
          AUTH: auth
          ORCHESTRATION_FILE: auth-oidc.json
          MONGODB_VERSION: latest
          TOPOLOGY: replica_set
      - func: setup oidc
      - func: run oidc tests

  - name: test-in-use-encryption-4.2
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.2
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-4.4
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 4.4
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-5.0
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 5.0
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-6.0
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 6.0
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-7.0
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: 7.0
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-rapid
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-latest
    tags: [in-use-encryption]
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: latest
          TOPOLOGY: replica_set
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-openssl
    commands:
      - func: "install libmongocrypt"
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: replica_set
      - func: "run kmip server"
      - func: "run mock azure imds server"
      - func: "run csfle tests"

  - name: test-in-use-encryption-serverless
    commands:
      - command: expansions.update
        params:
          file: src/expansion.yml
      - command: expansions.update
        params:
          file: serverless-expansion.yml
      - func: "install libmongocrypt"
      - func: "run kmip server"
      - func: "run mock azure imds server"
      - func: "run csfle serverless tests"

  - name: test-load-balancer-5.0
    tags: [load-balancer]
    commands:
      - func: bootstrap mongo-orchestration
        vars:
          MONGODB_VERSION: 5.0
          TOPOLOGY: sharded_cluster
          LOAD_BALANCER: true
      - func: start load balancer
      - func: run driver test suite

  - name: test-load-balancer-6.0
    tags: [load-balancer]
    commands:
      - func: bootstrap mongo-orchestration
        vars:
          MONGODB_VERSION: 6.0
          TOPOLOGY: sharded_cluster
          LOAD_BALANCER: true
      - func: start load balancer
      - func: run driver test suite

  - name: test-load-balancer-7.0
    tags: [load-balancer]
    commands:
      - func: bootstrap mongo-orchestration
        vars:
          MONGODB_VERSION: 7.0
          TOPOLOGY: sharded_cluster
          LOAD_BALANCER: true
      - func: start load balancer
      - func: run driver test suite

  - name: test-load-balancer-rapid
    tags: [load-balancer]
    commands:
      - func: bootstrap mongo-orchestration
        vars:
          MONGODB_VERSION: rapid
          TOPOLOGY: sharded_cluster
          LOAD_BALANCER: true
      - func: start load balancer
      - func: run driver test suite

  - name: test-load-balancer-latest
    tags: [load-balancer]
    commands:
      - func: bootstrap mongo-orchestration
        vars:
          MONGODB_VERSION: latest
          TOPOLOGY: sharded_cluster
          LOAD_BALANCER: true
      - func: start load balancer
      - func: run driver test suite

#############
# Functions #
#############
functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any.
    - command: git.get_project
      params:
        directory: "src"

  "create expansions":
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/create-expansions.sh
        add_expansions_to_env: true
    - command: expansions.update
      params:
        file: src/expansion.yml

  "add aws auth variables to file":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<EOF > ${DRIVERS_TOOLS}/.evergreen/auth_aws/aws_e2e_setup.json
          {
              "iam_auth_ecs_account": "${iam_auth_ecs_account}",
              "iam_auth_ecs_secret_access_key": "${iam_auth_ecs_secret_access_key}",
              "iam_auth_ecs_account_arn": "arn:aws:iam::557821124784:user/authtest_fargate_user",
              "iam_auth_ecs_cluster": "${iam_auth_ecs_cluster}",
              "iam_auth_ecs_task_definition": "${iam_auth_ecs_task_definition}",
              "iam_auth_ecs_subnet_a": "${iam_auth_ecs_subnet_a}",
              "iam_auth_ecs_subnet_b": "${iam_auth_ecs_subnet_b}",
              "iam_auth_ecs_security_group": "${iam_auth_ecs_security_group}",
              "iam_auth_assume_aws_account": "${iam_auth_assume_aws_account}",
              "iam_auth_assume_aws_secret_access_key": "${iam_auth_assume_aws_secret_access_key}",
              "iam_auth_assume_role_name": "${iam_auth_assume_role_name}",
              "iam_auth_ec2_instance_account": "${iam_auth_ec2_instance_account}",
              "iam_auth_ec2_instance_secret_access_key" : "${iam_auth_ec2_instance_secret_access_key}",
              "iam_auth_ec2_instance_profile": "${iam_auth_ec2_instance_profile}",
              "iam_auth_assume_web_role_name": "${iam_auth_assume_web_role_name}",
              "iam_web_identity_issuer": "${iam_web_identity_issuer}",
              "iam_web_identity_jwks_uri": "${iam_web_identity_jwks_uri}",
              "iam_web_identity_token_file": "${iam_web_identity_token_file}",
              "iam_web_identity_rsa_key": "${iam_web_identity_rsa_key}"
          }
          EOF

  "run aws auth test with regular aws credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          mongo aws_e2e_regular_aws.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias urlencode='python -c "import sys, urllib as ul; sys.stdout.write(ul.quote_plus(sys.argv[1]))"'
            USER=$(urlencode ${iam_auth_ecs_account})
            PASS=$(urlencode ${iam_auth_ecs_secret_access_key})
            MONGODB_URI="mongodb://$USER:$PASS@localhost"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          SKIP_CREDENTIAL_CACHING_TESTS=1 .evergreen/run-aws-tests.sh

  "run aws auth test with assume role credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          mongo aws_e2e_assume_role.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
              alias urlencode='python -c "import sys, urllib as ul; sys.stdout.write(ul.quote_plus(sys.argv[1]))"'
              alias jsonkey='python -c "import json,sys;sys.stdout.write(json.load(sys.stdin)[sys.argv[1]])" < ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json'
              USER=$(jsonkey AccessKeyId)
              USER=$(urlencode $USER)
              PASS=$(jsonkey SecretAccessKey)
              PASS=$(urlencode $PASS)
              SESSION_TOKEN=$(jsonkey SessionToken)
              SESSION_TOKEN=$(urlencode $SESSION_TOKEN)
              MONGODB_URI="mongodb://$USER:$PASS@localhost"
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          SKIP_CREDENTIAL_CACHING_TESTS=1 .evergreen/run-aws-tests.sh

  "run aws auth test with aws EC2 credentials":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          mongo aws_e2e_ec2.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          # Write an empty prepare_mongodb_aws so no auth environment variables
          # are set.
          echo "" > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
          .evergreen/run-aws-tests.sh

  "run aws auth test with aws credentials as environment variables":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          mongo aws_e2e_regular_aws.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ACCESS_KEY_ID=${iam_auth_ecs_account}
            export AWS_SECRET_ACCESS_KEY=${iam_auth_ecs_secret_access_key}
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          PROJECT_DIRECTORY=${PROJECT_DIRECTORY} \
            SKIP_CREDENTIAL_CACHING_TESTS=1 \
            .evergreen/run-aws-tests.sh

  "run aws auth test with aws credentials and session token as environment variables":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          mongo aws_e2e_assume_role.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            alias jsonkey='python -c "import json,sys;sys.stdout.write(json.load(sys.stdin)[sys.argv[1]])" < ${DRIVERS_TOOLS}/.evergreen/auth_aws/creds.json'
            export AWS_ACCESS_KEY_ID=$(jsonkey AccessKeyId)
            export AWS_SECRET_ACCESS_KEY=$(jsonkey SecretAccessKey)
            export AWS_SESSION_TOKEN=$(jsonkey SessionToken)
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: |
          ${PREPARE_SHELL}
          SKIP_CREDENTIAL_CACHING_TESTS=1 .evergreen/run-aws-tests.sh

  "run aws ecs auth test":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}

          # The "upload test results" post-task function expects this file to be present.
          touch results.xml

          AUTH_AWS_DIR=${DRIVERS_TOOLS}/.evergreen/auth_aws
          ECS_SRC_DIR=$AUTH_AWS_DIR/src

          mkdir -p $ECS_SRC_DIR/.evergreen

          # fix issue with `TestData` in SERVER-46340
          sed -i '1s+^+TestData = {};\n+' $AUTH_AWS_DIR/lib/ecs_hosted_test.js

          # compile mini test project
          cd $PROJECT_DIRECTORY/.evergreen/aws-ecs-test
          . ${PROJECT_DIRECTORY}/.evergreen/env.sh
          cargo build
          cd -

          # copy mini test binary
          cp $PROJECT_DIRECTORY/.evergreen/run-mongodb-aws-ecs-test.sh $ECS_SRC_DIR/.evergreen
          cp $PROJECT_DIRECTORY/.evergreen/aws-ecs-test/target/debug/aws-ecs-test $ECS_SRC_DIR

          cd $AUTH_AWS_DIR
          . ./activate-authawsvenv.sh
          export MONGODB_BINARIES=${MONGODB_BINARIES}
          export PROJECT_DIRECTORY="$ECS_SRC_DIR"
          python aws_tester.py ecs

  "run aws assume role with web identity test":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_aws
          . ./activate-authawsvenv.sh
          mongo aws_e2e_web_identity.js
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        script: |
          # DO NOT ECHO WITH XTRACE (which PREPARE_SHELL does)
          cat <<'EOF' > "${PROJECT_DIRECTORY}/prepare_mongodb_aws.sh"
            export AWS_ROLE_ARN="${iam_auth_assume_web_role_name}"
            export AWS_WEB_IDENTITY_TOKEN_FILE="${iam_web_identity_token_file}"
            if [ "$AWS_ROLE_SESSION_NAME" != "" ]; then
              export AWS_ROLE_SESSION_NAME="$AWS_ROLE_SESSION_NAME"
            fi
          EOF
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          PROJECT_DIRECTORY=${PROJECT_DIRECTORY} \
            ASSERT_NO_URI_CREDS=true \
            .evergreen/run-aws-tests.sh

  "run x509 tests":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}

          export MONGODB_URI="${MONGODB_URI}"
          export CERT_PATH=$DRIVERS_TOOLS/.evergreen/x509gen/client.pem

          .evergreen/run-x509-tests.sh

  "run plain tests":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}

          .evergreen/run-plain-tests.sh

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          git clone https://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  "install rust":
    command: shell.exec
    params:
      working_dir: src
      script: |
        ${PREPARE_SHELL}
        .evergreen/install-dependencies.sh rust

  "install libmongocrypt":
    command: shell.exec
    params:
      working_dir: src
      script: |
        ${PREPARE_SHELL}
        .evergreen/install-dependencies.sh libmongocrypt

  "install junit dependencies":
    command: shell.exec
    params:
      working_dir: src
      script: |
        ${PREPARE_SHELL}
        .evergreen/install-dependencies.sh junit-dependencies

  "bootstrap mongo-orchestration":
    - command: subprocess.exec
      params:
        binary: sh
        args:
          - ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
        add_expansions_to_env: true
    - command: expansions.update
      params:
        file: mo-expansion.yml
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/generate-uri.sh
        add_expansions_to_env: true
    - command: expansions.update
      params:
        file: src/uri-expansions.yml

  "generate uris":
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/generate-uri.sh
        add_expansions_to_env: true
    - command: expansions.update
      params:
        file: src/uri-expansions.yml

  "run driver test suite":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-tests.sh
        # The driver uses the absence/presence of variables defined in the project's settings to
        # determine how to create a test client, so the relevant expansions here MUST be listed
        # explicitly rather than setting add_expansions_to_env: true.
        include_expansions_in_env:
          - PROJECT_DIRECTORY
          - ASYNC_STD
          - OPENSSL
          - COMPRESSION
          - MONGODB_URI
          - MONGODB_API_VERSION
          - PATH

  "run sync tests":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-sync-tests.sh
        # Ditto comment above regarding explicitly listing expansions.
        include_expansions_in_env:
          - PROJECT_DIRECTORY
          - ASYNC_STD
          - MONGODB_URI

  "run serverless tests":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}

          # Export without xtrace to avoid leaking credentials.
          set +o xtrace
          export SERVERLESS_ATLAS_USER=${SERVERLESS_ATLAS_USER}
          export SERVERLESS_ATLAS_PASSWORD=${SERVERLESS_ATLAS_PASSWORD}

          export SINGLE_MONGOS_LB_URI=${SERVERLESS_URI}
          . .evergreen/generate-uri.sh

          .evergreen/run-serverless-tests.sh

  "run atlas tests":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        silent: true
        shell: bash
        script: |
          set +x
          export MONGO_ATLAS_TESTS=1
          export MONGO_ATLAS_FREE_TIER_REPL_URI='${MONGO_ATLAS_FREE_TIER_REPL_URI}'
          export MONGO_ATLAS_FREE_TIER_REPL_URI_SRV='${MONGO_ATLAS_FREE_TIER_REPL_URI_SRV}'
          export MONGO_ATLAS_SERVERLESS_URI='${MONGO_ATLAS_SERVERLESS_URI}'
          export MONGO_ATLAS_SERVERLESS_URI_SRV='${MONGO_ATLAS_SERVERLESS_URI_SRV}'
          export MONGO_ATLAS_REPL_URI='${MONGO_ATLAS_REPL_URI}'
          export MONGO_ATLAS_REPL_URI_SRV='${MONGO_ATLAS_REPL_URI_SRV}'
          export MONGO_ATLAS_SHARDED_URI='${MONGO_ATLAS_SHARDED_URI}'
          export MONGO_ATLAS_SHARDED_URI_SRV='${MONGO_ATLAS_SHARDED_URI_SRV}'
          export MONGO_ATLAS_TLS11_URI='${MONGO_ATLAS_TLS11_URI}'
          export MONGO_ATLAS_TLS11_URI_SRV='${MONGO_ATLAS_TLS11_URI_SRV}'
          export MONGO_ATLAS_TLS12_URI='${MONGO_ATLAS_TLS12_URI}'
          export MONGO_ATLAS_TLS12_URI_SRV='${MONGO_ATLAS_TLS12_URI_SRV}'
          export PROJECT_DIRECTORY='${PROJECT_DIRECTORY}'
          set -x

          .evergreen/run-atlas-tests.sh

  "run kmip server":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        background: true
        script: |
          ${PREPARE_SHELL}
          export TLS_FEATURE=${TLS_FEATURE}
          .evergreen/run-csfle-kmip-servers.sh

  "run mock azure imds server":
    - command: subprocess.exec
      params:
        working_dir: src
        background: true
        binary: bash
        args:
          - .evergreen/run-csfle-mock-azure-imds.sh
        add_expansions_to_env: true

  "run csfle tests":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/run-csfle-tests.sh
        add_expansions_to_env: true

  "run csfle serverless tests":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        add_expansions_to_env: true
        script: |
          ${PREPARE_SHELL}

          # Exported without xtrace to avoid leaking credentials
          set +o xtrace
          export SERVERLESS_ATLAS_USER=${SERVERLESS_ATLAS_USER}
          export SERVERLESS_ATLAS_PASSWORD=${SERVERLESS_ATLAS_PASSWORD}
          set -o xtrace

          export SINGLE_MONGOS_LB_URI=${SERVERLESS_URI}
          . .evergreen/generate-uri.sh
          export SERVERLESS=serverless

          .evergreen/run-csfle-tests.sh

  "build and upload gcp kms test":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}

          set +o xtrace
          export GCPKMS_GCLOUD=${GCPKMS_GCLOUD}
          export GCPKMS_PROJECT=${GCPKMS_PROJECT}
          export GCPKMS_ZONE=${GCPKMS_ZONE}
          export GCPKMS_INSTANCENAME=${GCPKMS_INSTANCENAME}
          set -o xtrace

          mkdir test-contents
          cp -r $MONGOCRYPT_LIB_DIR test-contents

          echo "Building test ... begin"
          . ${PROJECT_DIRECTORY}/.evergreen/env.sh
          cargo test get_exe_name --features in-use-encryption-unstable,gcp-kms -- --ignored
          cp $(cat exe_name.txt) test-contents/test-exe
          echo "Building test ... end"

          echo "Copying test contents ... begin"
          tar czf test-contents.tgz test-contents
          GCPKMS_SRC=test-contents.tgz GCPKMS_DST=$GCPKMS_INSTANCENAME: $DRIVERS_TOOLS/.evergreen/csfle/gcpkms/copy-file.sh
          echo "Copying test contents ... end"

          echo "Untarring test contents ... begin"
          GCPKMS_CMD="tar xf test-contents.tgz" $DRIVERS_TOOLS/.evergreen/csfle/gcpkms/run-command.sh
          echo "Untarring test contents ... end"

  "run gcp kms test":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}

          set +o xtrace
          export GCPKMS_GCLOUD=${GCPKMS_GCLOUD}
          export GCPKMS_PROJECT=${GCPKMS_PROJECT}
          export GCPKMS_ZONE=${GCPKMS_ZONE}
          export GCPKMS_INSTANCENAME=${GCPKMS_INSTANCENAME}
          set -o xtrace

          export GCPKMS_CMD="ON_DEMAND_GCP_CREDS_SHOULD_SUCCEED=1 \
            RUST_BACKTRACE=1 LD_LIBRARY_PATH=./test-contents/lib \
            ./test-contents/test-exe on_demand_gcp_credentials --nocapture"
          $DRIVERS_TOOLS/.evergreen/csfle/gcpkms/run-command.sh

  "bootstrap oidc":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_oidc
          set +o xtrace

          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
          export OIDC_TOKEN_DIR=/tmp/tokens

          . ./activate-authoidcvenv.sh
          python oidc_write_orchestration.py
          python oidc_get_tokens.py

  "setup oidc":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd ${DRIVERS_TOOLS}/.evergreen/auth_oidc
          mongosh setup_oidc.js

  "run oidc tests":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          export OIDC_TOKEN_DIR=/tmp/tokens
          .evergreen/run-oidc-tests.sh

  "compile only":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          RUST_VERSION=${RUST_VERSION} .evergreen/compile-only.sh

  "check cargo deny":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-cargo-deny.sh

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-rustfmt.sh

  "check clippy":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-clippy.sh

  "check rustdoc":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          .evergreen/check-rustdoc.sh

  "check manual":
    - command: shell.exec
      type: test
      params:
        working_dir: src
        shell: bash
        script: |
          ${PREPARE_SHELL}
          .evergreen/install-dependencies.sh mdbook
          manual/test.sh

  "upload-mo-artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"

  "stop mongo orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}

          cd ${MONGO_ORCHESTRATION_HOME}
          # source the mongo-orchestration virtualenv if it exists
          if [ -f venv/bin/activate ]; then
            . venv/bin/activate
          elif [ -f venv/Scripts/activate ]; then
            . venv/Scripts/activate
          fi
          mongo-orchestration stop

  "cleanup":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          set +o xtrace
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          set +o xtrace
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done

          # Copy client certificate because symlinks do not work on Windows.
          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
            cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem
          fi

  "make files executable":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          set +o xtrace
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "init test-results":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          echo '{"results": [{ "status": "FAIL", "test_file": "Build", "log_raw": "No test-results.json found was created"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

  "start load balancer":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          export MONGODB_URI="${MONGODB_URI}"
          ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh start
    - command: expansions.update
      params:
        file: lb-expansion.yml

  "stop load balancer":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh stop

  "tear down aws":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd "${DRIVERS_TOOLS}/.evergreen/auth_aws"
          if [ -f "./aws_e2e_setup.json" ]; then
            . ./activate-authawsvenv.sh
            python ./lib/aws_assign_instance_profile.py
          fi

  "upload test results":
    - command: attach.xunit_results
      params:
        file: src/results.xml
