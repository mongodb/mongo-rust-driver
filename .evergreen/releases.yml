## Testing changes to this file
#
# You'll need to know the git tag of the most recent release; call that ${TAG}.
#
# The simplest way is to develop changes as a branch from the most recent release;
# in that case, a release dry-run can be executed via:
#
# evergreen patch --path .evergreen/releases.yml \
#     -t publish-release -v all \
#     -p mongo-rust-driver-current \
#     -u --browse \
#     --param triggered_by_git_tag=${TAG} \
#     --param DRY_RUN=yes
#
# If the changes need to be developed against the main branch, more steps are needed:
#
# 1. Add dummy version numbers to the Cargo.toml lines for mongodb-internal-macros, bson,
#    and libmongocrypt
# 2. Comment out the "fetch tag" func call from the "publish-release" task in this file
# 3. Execute:
#
# evergreen patch --path .evergreen/releases.yml \
#     -t publish-release -v all \
#     -p mongo-rust-driver \
#     -u --browse \
#     --param triggered_by_git_tag=${TAG} \
#     --param DRY_RUN=yes \
#     --param PACKAGE_ONLY=yes
#
# Make sure to remove the changes from 1 and 2 before merging!

exec_timeout_secs: 3600 

functions:
  "fetch source":
    - command: git.get_project
      type: system
      params:
        directory: "src"
    # Make an evergreen expansion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           export PROJECT_DIRECTORY="$(pwd)"
           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"

           cat <<EOT > expansion.yml
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           GIT_TAG: "${triggered_by_git_tag}"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export PROJECT="${project}"

           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

    # Delete the expansion file so cargo release doesn't complain about uncommitted changes
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          rm expansion.yml

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .evergreen/install-dependencies.sh rust

    - command: subprocess.exec
      params:
        working_dir: src
        include_expansions_in_env:
          - DRIVERS_TOOLS
        binary: bash
        args:
          - .evergreen/fetch-drivers-tools.sh

  "build vars":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}

    - command: subprocess.exec
      params:
        working_dir: src
        add_expansions_to_env: true
        binary: bash
        args:
          - .evergreen/release-build-vars.sh

    - command: expansions.update
      params:
        file: src/release-expansion.yml

    - command: shell.exec
      params:
        working_dir: "src"
        script: rm release-expansion.yml

  "fetch tag":
    command: subprocess.exec
    params:
      working_dir: "src"
      include_expansions_in_env:
        - GIT_TAG
      binary: bash
      args:
        - .evergreen/release-fetch-tag.sh

  "publish release":
    - command: subprocess.exec
      type: test
      params:
        working_dir: "src"
        add_expansions_to_env: true
        binary: bash
        args:
          - .evergreen/release-danger-do-not-run-manually.sh

  "publish papertrail":
    - command: papertrail.trace
      params:
        key_id: ${PAPERTRAIL_KEY_ID}
        secret_key: ${PAPERTRAIL_SECRET_KEY}
        product: ${PAPERTRAIL_PRODUCT}
        version: ${CRATE_VERSION}
        filenames:
          - src/target/package/mongodb-${CRATE_VERSION}.crate
          - src/macros/target/package/mongodb-internal-macros-${CRATE_VERSION}.crate

  "sign release":
    - command: subprocess.exec
      params:
        working_dir: "src"
        include_expansions_in_env:
          - ARTIFACTORY_USERNAME
          - ARTIFACTORY_PASSWORD
          - GARASIGN_USERNAME
          - GARASIGN_PASSWORD
          - CRATE_VERSION
        binary: bash
        args:
          - .evergreen/release-sign.sh

  # Note for debugging: the links generated by Evergreen for these files will
  # return a "permission denied" error; this is expected and a consequence of
  # s3 configuration.  The files can be viewed/downloaded by replacing the host
  # portion of the URL with `downloads.mongodb.org`.
  "save signature":
    - command: s3.put
      params:
        aws_key: ${S3_UPLOAD_AWS_KEY}
        aws_secret: ${S3_UPLOAD_AWS_SECRET}
        local_files_include_filter:
          - src/mongodb-${CRATE_VERSION}.sig
          - src/mongodb-internal-macros-${CRATE_VERSION}.sig
        remote_file: rust-driver/${TEST_PREFIX}
        bucket: cdn-origin-rust-driver
        permissions: private
        content_type: text/plain
        display_name: signature-

  "create and upload SSDLC compliance report":
    - command: subprocess.exec
      params:
        working_dir: "src"
        include_expansions_in_env:
          - CRATE_VERSION
        binary: bash
        args:
          - .evergreen/create-ssdlc-compliance-report.sh
    - command: s3.put
      params:
        aws_key: ${S3_UPLOAD_AWS_KEY}
        aws_secret: ${S3_UPLOAD_AWS_SECRET}
        local_file: src/.evergreen/${CRATE_VERSION}-ssdlc-compliance-report.md
        remote_file: rust-driver/${TEST_PREFIX}${CRATE_VERSION}-ssdlc-compliance-report.md
        bucket: cdn-origin-rust-driver
        permissions: private
        content_type: text/markdown

tasks:
  - name: "publish-release"
    commands:
      - func: "fetch source"
      - func: "install dependencies"
      - func: "fetch tag"
      - func: "build vars"
      - func: "publish release"
      - func: "publish papertrail"
      - func: "sign release"
      - func: "save signature"
      - func: "create and upload SSDLC compliance report"

axes:
  - id: "os"
    display_name: OS
    values:
      - id: ubuntu-20.04
        display_name: "Ubuntu 20.04"
        run_on: ubuntu2004-test

buildvariants:
-
  matrix_name: "release"
  matrix_spec:
    os: "*"
  display_name: "Publish driver release"
  tasks:
    - "publish-release"
