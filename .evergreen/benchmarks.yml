########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 60 minutes is the longest we'll ever run
exec_timeout_secs: 3600

pre_error_fails_task: true

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"
           export PROJECT_DIRECTORY="$(pwd)"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export DRIVERS_TOOLS="$DRIVERS_TOOLS"
              export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
              export MONGODB_BINARIES="$MONGODB_BINARIES"
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
              export DRIVERS_TOOLS_X509="$DRIVERS_TOOLS/.evergreen/x509gen"

              export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
              export PATH="$MONGODB_BINARIES:$PATH"
              export PROJECT="${project}"

              export AUTH=${AUTH}
              export SSL=${SSL}
              export TOPOLOGY=${TOPOLOGY}
              export MONGODB_VERSION=${MONGODB_VERSION}

              if [ "Windows_NT" != "$OS" ]; then
                  ulimit -n 64000
              fi
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  "install dependencies":
    command: shell.exec
    params:
      working_dir: "src"
      script: |
        ${PREPARE_SHELL}
        .evergreen/install-dependencies.sh

  "download benchmark data":
    command: shell.exec
    params:
      working_dir: "src"
      script: |
        ${PREPARE_SHELL}
        cd benchmarks && ./download-data.sh

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
            MONGODB_VERSION=${MONGODB_VERSION} \
            TOPOLOGY=${TOPOLOGY} \
            AUTH=${AUTH} \
            SSL=${SSL} \
            REQUIRE_API_VERSION=${REQUIRE_API_VERSION} \
            sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "run driver benchmarks":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          export MONGODB_URI="${MONGODB_URI}"
          export SSL="${SSL}"
          . .evergreen/generate-uri.sh

          ASYNC_RUNTIME=${ASYNC_RUNTIME} \
            .evergreen/run-driver-benchmarks.sh

  "run bson benchmarks":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}

          .evergreen/run-bson-benchmarks.sh

  "compile only":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          ASYNC_RUNTIME=${ASYNC_RUNTIME} .evergreen/run-compile-benchmarks.sh

  "upload-mo-artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"

  "upload benchmark results":
    - command: perf.send
      params:
        file: "src/benchmark-results.json"

  "stop mongo orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}

          cd "$MONGO_ORCHESTRATION_HOME"
          # source the mongo-orchestration virtualenv if it exists
          if [ -f venv/bin/activate ]; then
            . venv/bin/activate
          elif [ -f venv/Scripts/activate ]; then
            . venv/Scripts/activate
          fi
          mongo-orchestration stop


  "cleanup":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf ~/.rustup
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done

          # Copy client certificate because symlinks do not work on Windows.
          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
            cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem
          fi

  "make files executable":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "init test-results":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          echo '{"results": [{ "status": "FAIL", "test_file": "Build", "log_raw": "No test-results.json found was created"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

pre:
  - func: "fetch source"
  - func: "prepare resources"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "init test-results"
  - func: "make files executable"
  - func: "install dependencies"
  - func: "download benchmark data"

post:
  - func: "stop mongo orchestration"
  - func: "cleanup"

tasks:
  - name: "benchmark-4.2-standalone"
    tags: ["4.2", "standalone"]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: "4.2"
          TOPOLOGY: "server"
      - func: "run driver benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-4.2-replica_set"
    tags: ["4.2", "replica_set"]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: "4.2"
          TOPOLOGY: "replica_set"
      - func: "run driver benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-4.2-sharded_cluster"
    tags: ["4.2", "sharded_cluster"]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: "4.2"
          TOPOLOGY: "sharded_cluster"
      - func: "run driver benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-5.0-standalone"
    tags: ["5.0", "standalone"]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: "5.0"
          TOPOLOGY: "server"
      - func: "run driver benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-5.0-replica_set"
    tags: ["5.0", "replica_set"]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: "5.0"
          TOPOLOGY: "replica_set"
      - func: "run driver benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-5.0-sharded_cluster"
    tags: ["5.0", "sharded_cluster"]
    commands:
      - func: "bootstrap mongo-orchestration"
        vars:
          MONGODB_VERSION: "5.0"
          TOPOLOGY: "sharded_cluster"
      - func: "run driver benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-bson"
    tags: ["bson"]
    commands:
      - func: "run bson benchmarks"
      - func: "upload benchmark results"

  - name: "benchmark-compile"
    commands:
      - func: "compile only"
      - func: "upload benchmark results"

axes:
  - id: "mongodb-version"
    display_name: MongoDB Version
    values:
      - id: "5.0"
        display_name: "5.0"
        variables:
          MONGODB_VERSION: "5.0"
      - id: "4.2"
        display_name: "4.2"
        variables:
          MONGODB_VERSION: "4.2"

  - id: "topology"
    display_name: Topology
    values:
      - id: "standalone"
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: "replica-set"
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: "sharded-cluster"
        display_name: Sharded
        variables:
           TOPOLOGY: "sharded_cluster"

  - id: "async-runtime"
    display_name: Async Runtime
    values:
      - id: "tokio"
        display_name: "tokio"
        variables:
          ASYNC_RUNTIME: "tokio"
      - id: "async-std"
        display_name: "async-std"
        variables:
          ASYNC_RUNTIME: "async-std"

  # Note that drivers-evergreen-tools expects `SSL` as the environmental
  # variable, not `TLS`, so we have to use that for the actual value used in the
  # script; we use `TLS` for the metadata that isn't used by the actual shell
  # scripts.
  - id: "auth-and-tls"
    display_name: Authentication and TLS
    values:
      - id: "auth-and-tls"
        display_name: Auth TLS
        variables:
           AUTH: "auth"
           SSL: "ssl"

  - id: "os"
    display_name: OS
    values:
      - id: ubuntu-18.04
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-test
        variables:
          PYTHON: "/opt/mongodbtoolchain/v3/bin/python"
          VENV_BIN_DIR: "bin"
      # TODO: RUST-990 re-enable macOS benchmarks
      # - id: macos-10.14
      #   display_name: "MacOS 10.14"
      #   run_on: macos-1014
      #   variables:
      #     PYTHON: "/opt/mongodbtoolchain/v3/bin/python"
      #     VENV_BIN_DIR: "bin"
      - id: windows-64-vs2017
        display_name: "Windows (VS 2017)"
        run_on: windows-64-vs2017-test
        variables:
          PYTHON: "/cygdrive/c/python/Python36/python"
          VENV_BIN_DIR: "Scripts"

buildvariants:
-
  matrix_name: "driver benchmarks"
  matrix_spec:
    os:
      - ubuntu-18.04
      - windows-64-vs2017
    auth-and-tls: "*"
    async-runtime: "*"
  display_name: "${os} ${auth-and-tls} with ${async-runtime}"
  tasks:
     - ".5.0"
     - ".4.2"
-
  matrix_name: "bson benchmarks"
  matrix_spec:
    os:
      - ubuntu-18.04
  display_name: "BSON Benchmarks"
  tasks:
     - ".bson"

- matrix_name: "compile-only"
  matrix_spec:
    os:
      - ubuntu-18.04
    async-runtime: "*"
  display_name: "Compile on ${os} with ${async-runtime}"
  tasks:
    - "benchmark-compile"

